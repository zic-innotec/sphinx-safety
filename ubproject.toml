"$schema" = "https://ubcode.useblocks.com/ubproject.schema.json"

# This is the Sphinx-Needs configuration file in TOML format.
# It is announced to Sphinx-Needs by putting
#   needs_from_toml = "ubproject.toml"
# into conf.py.
# This is required to make the project work with ubCode.
# For details see https://ubcode.useblocks.com
# Also a declarative configuration format is generally a good idea.

[project]
name = "Sphinx-Needs Demo"
description = "Showcases for working with Sphinx-Needs"
srcdir = "."

# Rules for the ubCode formater, to get a nice looking documentation.
[format_rst]
fail_on_warning = []
validate = true
blockquote_indent = 2
definition_list_indent = 2
directive_indent = 3
enum_list_auto = "preserve"
enum_list_style = "preserve"
field_list_align_body = false
field_list_body_on_new_line = 20
field_list_indent = 2
literal_indent = 2
paragraph_line_length = 70
paragraph_semantic_wrap = false
simple_table_space = 2
substitution_indent = 3
transition_char = "-"
transition_length = 10

# all needs configuration goes to then needs table;
# the varibles do not have the needs_ prefix in the name
[needs]
build_json = true

# Additional options, which shall be available for all need types.
# see https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-extra-options
extra_options = [
    "impact",
    "owner",
    "probability",
    "result",
    "risklevel",
    "version",
    "ti",
    "si",
    "td",
    "tcl",
    "priority",
    "company",
    "department",
    "email",
    "url",
    
]

# Force the author to set an ID by hand.
# Otherwise Sphinx-Needs would create one based on the Need title.
# So a title change will change the ID and all set links will get invalid.
# Therefore setting a stable ID by hand is always a good idea.
# see https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-id-required
id_required = true

# The format of a need gets defined here.
# see https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-id-regex
id_regex = "[A-Z_]{3,10}(_[\\d]{1,3})*"


# needs_global_options allows us to set values for Sphinx-Need objects globally, based on
# filters.
# see https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-global-options
# needs_global_options allows us to set values for Sphinx-Need objects globally, based on
# filters.
# see https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-global-options
# [needs.global_options]
# collapse = { "default" = "False" } # The meta-area of all Sphinx-Needs objects shall be hidden.

# collapse-bug in Sphinx-Needs
# [needs.global_options.collapse]
# default = true

[needs.global_options.style]
predicates = [
  [
    "type in ['usecase']",
    "purple_bar",
  ],
  [
    "type in ['feature']",
    "green_bar",
  ],
  [
    "type in ['error']",
    "red_bar",
  ],
  [
    "type in ['tool']",
    "blue_bar",
  ],
  [
    "type in ['check']",
    "pink_bar",
  ],
  [
    "type in ['restriction']",
    "orange_bar",
  ],
  [
    "type in ['step']",
    "gray_bar",
  ],
  [
    "type in ['artifact']",
    "tropical_bar",
  ],
  [
    "type in ['test']",
    "black_bar",
  ],
]

# List of need type used in the documentation.
# Docs: https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-types
[[needs.types]]
directive = "artifact"
title = "Artifact"
prefix = "IO_"
color = "#LightBlue"
style = "file"

[[needs.types]]
directive = "check"
title = "Check"
prefix = "CHECK_"
color = "#LawnGreen"
style = "rectangle"

[[needs.types]]
directive = "error"
title = "Error"
prefix = "ERR_"
color = "#Pink"
style = "rectangle"

[[needs.types]]
directive = "feature"
title = "Feature"
prefix = "FEAT_"
color = "#Gold"
style = "rectangle"

[[needs.types]]
directive = "project"
title = "Project"
prefix = "PR_"
color = "#Gray"
style = "cloud"

[[needs.types]]
directive = "restriction"
title = "Restriction"
prefix = "REST_"
color = "#Orange"
style = "rectangle"

[[needs.types]]
directive = "test"
title = "Test"
prefix = "T_"
color = "#DarkTurquoise"
style = "node"

[[needs.types]]
directive = "tool"
title = "Tool"
prefix = "TO_"
color = "#0fbcf9"
style = "node"

[[needs.types]]
directive = "usecase"
title = "Use Case"
prefix = "USE_"
color = "#Thistle"
style = "rectangle"

[[needs.types]]
directive = "responsible"
title = "Responsible"
prefix = "RESP_"
color = "#555555"
style = "rectangle"

[[needs.types]]
directive = "step"
title = "Process step"
prefix = "STEP_"
color = "#777777"
style = "rectangle"

[[needs.extra_links]]
# project --> usecase
option = "uses"
incoming = "used_by"
outgoing = "uses"
copy = false
style = "thickness=1,#00AA00"
style_part = "thickness=1,#00AA00"
style_start = "-"
style_end = "->"

[[needs.extra_links]]
# responsible --> project
option = "member_of"
incoming = "has_member"
outgoing = "member_of"
copy = false
style = "thickness=1,#00AA00"
style_part = "thickness=1,#00AA00"
style_start = "-"
style_end = "->"

[[needs.extra_links]]
# usecase/feature --> artifact
option = "inputs"
incoming = "needed by"
outgoing = "inputs"
copy = false
style = "thickness=1,#00AA00"
style_part = "thickness=1,#00AA00"
style_start = "<-"
style_end = "-"
style_reverse = true

[[needs.extra_links]]
# usecase/feature --> artifact
option = "outputs"
incoming = "provided_by"
outgoing = "outputs"
copy = false
style = "thickness=1,#0000AA"
style_part = "thickness=1,#0000AA"
style_start = "-"
style_end = "->"

[[needs.extra_links]]
# usecase/feature --> error
option = "raises"
incoming = "raised_by"
outgoing = "raises"
copy = false
style = "thickness=1,#FF3333"
style_part = "thickness=1,#FF3333"
style_start = "-"
style_end = "->"

[[needs.extra_links]]
# usecase --> feature, features --> restriction
option = "features"
incoming = "featured by"
outgoing = "features"
copy = false
style = "#Gold"
style_part = "#Gold"

[[needs.extra_links]]
# feature -> tools
option = "tools"
incoming = "part of"
outgoing = "tools"
copy = false
style = "#333333"
style_part = "#333333"

[[needs.extra_links]]
option = "tool"
incoming = "contains"
outgoing = "tool"
copy = false
style = "#333333"
style_part = "#333333"

[[needs.extra_links]]
# usecase --> feature, features --> restriction
option = "requires_unsafe"
incoming = "unsafe required by"
outgoing = "requires unsafe"
copy = false
style = "#Gold"
style_part = "#Gold"

[[needs.extra_links]]
# restriction --> error
option = "avoids"
incoming = "avoided by"
outgoing = "avoids"
copy = false
style = "#FA8072"
style_part = "#FA8072"


[[needs.extra_links]]
#  check -> error, check --> restriction
option = "checks"
incoming = "checked by"
outgoing = "checks"
copy = false
style = "#FA8072"
style_part = "#FA8072"


[[needs.extra_links]]
# test --> error
option = "errors"
incoming = "tests"
outgoing = "errors"
copy = false
style = "#FA8072"
style_part = "#FA8072"


[[needs.extra_links]]
# usecase --> responsible
option = "responsible"
incoming = "responsible for"
outgoing = "responsible"
copy = false
style = "#FA8072"
style_part = "#FA8072"

# [[needs.string_links.sn]]
# link_url = "https://github.com/useblocks/sphinx-needs/issues/{{value}}"
# link_name= "GitHub #{{value}}"
# options = ["line"]


# ubCode setting: add custom extensions
[parse.extend_directives.uml]
# see https://github.com/sphinx-contrib/plantuml
description = "Render UML diagrams"
argument = true
content_required = false
parse_content = false
content = true
options = true

[parse.extend_directives.if-builder]
# see https://sphinx-simplepdf.readthedocs.io/en/latest/directives.html#if-builder
description = "Sphinx-SimplePDF builder specific content"
argument = true
argument_required = true
content = true
content_required = true
options = false

[parse.extend_directives.button-link]
# see https://sphinx-design.readthedocs.io/en/latest/badges_buttons.html#buttons
# not yet part of ubCode internal directives
description = "Sphinx-Design button with link"
argument = true
argument_required = true
content = true
content_required = true
options = true

# see https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-import-keys
[needs.import_keys]
imported_project = "/needs_import.json"

# ubCode setting: display a needs.json file in the extension view
[needs_json]
path = "./_build/html/needs.json"
src = "."

# ubCode setting: run a script command
[scripts]
sphinx = "sphinx-build -b html . _build/html"
